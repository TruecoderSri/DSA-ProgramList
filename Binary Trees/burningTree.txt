class Solution {
  public:
    
    Node* levelOrder(map<Node*,Node*> &nodePar,
    Node* root,int target){
        
        Node *res=NULL;
        queue<Node*> q;
        q.push(root);
        nodePar[root]=NULL;
        while(!q.empty()){
           
             auto node=q.front();
              q.pop();
             
             if(node->data ==target){
                 res=node;
             }
             
             if(node->left){
              nodePar[node->left] = node;
              q.push(node->left);
             }
             if(node->right){
              nodePar[node->right] = node;
              q.push(node->right);
             }
            
        }
        return res;
    }
    
    int burnTree (Node *root, map<Node*,Node*> &nodePar){
        
        map<Node*,bool> vis;
        queue<Node *> q;
        
        q.push(root);
        vis[root]=1;
        
        int time=0;
        while(!q.empty()){
            bool flag=0;
            int s=q.size();
            for(int i=0;i<s;i++){
                auto node=q.front();
                q.pop();
                if(node->left && !vis[node->left]){
                    flag=1;
                    q.push(node->left);
                    vis[node->left]=1;
                }
                
                if(node->right && !vis[node->right]){
                    flag=1;
                    q.push(node->right);
                    vis[node->right]=1;
                }
                
                if(nodePar[node] && !vis[nodePar[node]]){
                    flag=1;
                    q.push(nodePar[node]);
                    vis[nodePar[node]]=1;
                }
            }
            if(flag){
            time++;
            }
        }
        
        return time;
    }
  
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        map<Node*,Node*> nodePar;
        Node *res =levelOrder(nodePar,root,target);
        
        int time=burnTree(res,nodePar);
        return time;
    }
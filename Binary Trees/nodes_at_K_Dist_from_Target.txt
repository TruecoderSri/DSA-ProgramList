void mark_parent(unordered_map<Node*,Node*> &parent,Node* root){
           
	    queue<Node*> q;
            q.push(root);
            while(!q.empty()){
                auto curr=q.front();
                q.pop();
                if(curr->left){
                    parent[curr->left]=curr;
                    q.push(curr->left);
                }
                
                if(curr->right){
                    parent[curr->right]=curr;
                    q.push(curr->right);
                }
            }
        }


    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        unordered_map<Node*,Node*> parent;
        
        mark_parent(parent,root);  // mark all nodes to their resp parents
        
        unordered_map<Node*,bool> vis;  //track all vis nodes to avoid duplicate traversal
        queue<Node*> q;
        Node *t= new  struct Node();
        t->data=target;
        q.push(t);
        vis[t]=true;
        int curr_level=0;
        while(!q.empty()){
            int size=q.size();
            
            if(curr_level++==k) break;
            
            for(int i=0;i<size;i++){
                Node* curr=q.front(); 
                q.pop();
                
                if(curr->left && !vis[curr->left]){
                    q.push(curr->left);
                    vis[curr->left]=true;
                }
                 if(curr->right && !vis[curr->right]){
                    q.push(curr->right);
                    vis[curr->right]=true;
                }
                if(parent[curr] && !vis[parent[curr]]){
                    q.push(parent[curr]);
                    vis[parent[curr]]=true;
                }
            }
        }
        
        // last lot left after break statement
        vector<int> res;
        
        while(!q.empty()){
            Node* curr=q.front();
            q.pop();
            res.push_back(curr->data);
            
        }
        return  res;
    }
class Solution {
public:
    int solve(int i, int j, vector<int>& nums, vector<vector<int>>& dp) {
        if (i > j)
            return 0;

        if (dp[i][j] != -1)
            return dp[i][j];
        int ans = INT_MIN;
        for (int ind = i; ind <= j; ind++) {
            int cost = nums[i - 1] * nums[ind] * nums[j + 1] +
                       solve(i, ind - 1, nums, dp) +
                       solve(ind + 1, j, nums, dp);
            ans = max(ans, cost);
        }
        return dp[i][j] = ans;
    }

    int maxCoins(vector<int>& nums) {

        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        // vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));

        for (int i = n; i >= 1; i--) {
            for (int j = 1; j <= n; j++) {
                if (i > j)
                    continue;
                int ans = INT_MIN;
                for (int ind = i; ind <= j; ind++) {
                    int cost = nums[i - 1] * nums[ind] * nums[j + 1] +
                               dp[i][ind - 1] + dp[ind + 1][j];
                    ans = max(ans, cost);
                }
                dp[i][j] = ans;
            }
        }

        // return solve(1, n, nums, dp);
        return dp[1][n];
    }
};
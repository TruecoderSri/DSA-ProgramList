int solve(string a,string b,int n1,int n2,vector<vector<int>>&dp){
        if(n1==0||n2==0) return 0;
        
        if(dp[n1][n2]!=-1) return dp[n1][n2];
        
        if(a[n1-1]==b[n2-1]){
            dp[n1][n2]=1+solve(a,b,n1-1,n2-1,dp);
        }
        else{
            dp[n1][n2]=max(solve(a,b,n1-1,n2,dp),solve(a,b,n1,n2-1,dp));
        }
        
        return dp[n1][n2];
    }

    int findMinInsertions(string A){
        // code here 
        
        // it is calculates as S.length- lps.length
        int n=A.size();
        string B=A;
        reverse(B.begin(),B.end());
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(A[i-1]==B[j-1])
                 dp[i][j]=1+ dp[i-1][j-1];
                 else
                 dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
        
        int lps=dp[n][n];
        
        return A.length() - lps;
        
    }
};
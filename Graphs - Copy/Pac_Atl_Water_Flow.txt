class Solution {
public:

    void dfs(vector<vector<int>>& heights, vector<vector<bool>>&vis,int i,int j,int prev,bool isPac,bool isAtl){

        if(i<0 ||i>=heights.size()||j<0||j>=heights[0].size())
        return ;

        if(vis[i][j] ||heights[i][j]<prev)  return;

        vis[i][j]=1;

        if(isPac && isAtl) return;

// all 4 directions
         dfs(heights,vis,i-1,j,heights[i][j],isPac,isAtl);
         dfs(heights,vis,i+1,j,heights[i][j],isPac,isAtl);
         dfs(heights,vis,i,j-1,heights[i][j],isPac,isAtl);
         dfs(heights,vis,i,j+1,heights[i][j],isPac,isAtl);

    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if(heights.empty()||heights[0].empty())
        return  {};

        int m=heights.size();
        int n=heights[0].size();
        
        vector<vector<bool>> pacific(m,vector<bool>(n,0));
        vector<vector<bool>> atlantic(m,vector<bool>(n,0));

         for(int i=0;i<m;i++){
             dfs(heights,pacific,i,0,INT_MIN,true,false);
             dfs(heights,atlantic,i,n-1,INT_MIN,false,true);

         }


         for(int i=0;i<n;i++){
             dfs(heights,pacific,0,i,INT_MIN,true,false);
             dfs(heights,atlantic,m-1,i,INT_MIN,false,true);

         }

         vector<vector<int>> res;

         for(int i=0;i<m;i++){
             for(int j=0;j<n;j++){
                 if(pacific[i][j]&& atlantic[i][j])
                 res.push_back({i,j});
             }
         }
       return res;
    }
};
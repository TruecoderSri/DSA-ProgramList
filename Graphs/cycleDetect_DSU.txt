class Solution
{
    public:
    //Function to detect cycle using DSU in an undirected graph.
    
    int findPar(int i,vector<int>&parent){
        if(i==parent[i]) return i;
        return parent[i]= findPar(parent[i],parent);
    }
    
    
    bool  unionSet(int u,int v,vector<int>&parent){
        
        int p1=findPar(u,parent);
        int p2=findPar(v,parent);
        
        if(p1!=p2){
            parent[p1]=p2;
            return false;
        }
        return true;
    }
    
	int detectCycle(int V, vector<int>adj[])
	{
	    // Code here
	    vector<int> parent(V);
	    
	    for(int i=0;i<V;i++){
	        parent[i]=i;
	    }
	    
	    for(int i=0;i<V;i++){
	        for(int j=0;j<adj[i].size();j++){
	            if(i<adj[i][j] && unionSet(i,adj[i][j],parent))
	            return 1;
	        }
	    }
	    return 0;
	}
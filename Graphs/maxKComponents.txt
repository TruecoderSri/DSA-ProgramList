class Solution {
public:
    int dfs(int node,int par,vector<vector<int>>&graph,vector<int>&values,int k,int &cnt){
        int curr=0;

        for(auto it:graph[node]){
            if(it!=par){
                curr+=dfs(it,node,graph,values,k,cnt);
                curr%=k;
            }
        }
        curr+=values[node];
        if(curr%k==0) cnt++;
         return curr; 
    }

    int maxKDivisibleComponents(int n, vector<vector<int>>& edges, vector<int>& values, int k) {
        vector<vector<int>> graph(n);
         int cnt=0;
        for(auto it:edges){
            graph[it[0]].push_back(it[1]);
            graph[it[1]].push_back(it[0]);

        }

        dfs(0,-1,graph,values,k,cnt);
        return cnt;
    }
};
class Solution {
public:
   typedef pair<int,pair<int,int>> pop;
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        
        // min-heap
        priority_queue<pop,vector<pop>,greater<pop>> pq;
        pq.push({0,{0,0}});
        vector<vector<int>>dist(n,vector<int>(m,1e9));
        dist[0][0]=0;
        int dr[]={-1,0,1,0};
        int dc[]={0,1,0,-1};
        while(!pq.empty()){
            auto it=pq.top();
            pq.pop();
            int diff=it.first;
            int row=it.second.first;
            int col=it.second.second;

            if(row==n-1 && col==m-1) return diff;

            for(int i=0;i<4;i++){
                int newR= row+dr[i];
                int newC=col+dc[i];

                // check boundary conditions
                if(newR>=0 &&newR<n && newC>=0 &&newC<m){
                    int effort=max(diff,abs(heights[newR][newC]-heights[row][col]));
                    if(effort<dist[newR][newC]){
                        dist[newR][newC]=effort;
                        pq.push({effort,{newR,newC}});
                    }
                }
            }
        }
            return  -1;
    }
};
 public:
    
    // lps --> longest prefix which is also a suffix
    
    // here the idea is that we dont need to compare redundant strings as in naive string algorithm
    
    vector<int> prefix_function(string s){
        int n =s.length();
        
        vector<int> lps(n);
        
        for(int i=1;i<n;i++){
           
            int j= lps[i-1];
           
            while(j>0 && s[i]!=s[j])
                j= lps[j-1];
           
                if(s[i]== s[j])
                j++;
                lps[i]=j;
        }
        return lps;
    }
    
    
        vector <int> search(string pat, string txt)
        {
            //code here
            
            string look = pat + '?' + txt;
            
            vector<int> kmp= prefix_function(look);
            
            vector<int> ans;
            
            int st= 2*pat.size();
            
            for(int i=st;i<look.size();i++){
                if(kmp[i] == pat.size()){
                    ans.push_back(i - st + 1);
                }
            }
            
            return ans;
            
        }
     
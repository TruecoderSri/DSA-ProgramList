class Solution {
public:
    int kthGrammar(int n, int k) {
        // Base case: The first row is always 0.
        if (n == 1) {
            return 0;
        }

        // Calculate the middle position of the previous row.
        int mid = 1 << (n - 2);

        // If k is in the first half, it's the same as in the previous row.
        if (k <= mid) {
            return kthGrammar(n - 1, k);
        }
        // If k is in the second half, it's the opposite of the previous row.
        else {
            return 1 - kthGrammar(n - 1, k - mid);
        }
    }
};

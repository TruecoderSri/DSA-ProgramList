/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

    ListNode *reverse(ListNode *curr){
        
        ListNode *prev= NULL, *tra=NULL;

        while(curr!=NULL){
            tra = curr->next;
            curr->next=prev;
            prev=curr;
            curr=tra;
        }
        return prev;
    }

    ListNode* find(ListNode * temp,int k){
        
        k-=1;
        while(temp!=NULL && k>0){
            k--;
            temp=temp->next;
        }
        return temp;
    }
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
     
     ListNode * temp=head;
     ListNode * prevNode=NULL;

     while(temp!=NULL){
         ListNode *kthNode = find(temp,k);

         if(kthNode == NULL){
             if(prevNode){
                 prevNode->next=temp;
             }
             break;
         }

        ListNode *nextNode = kthNode->next;
        kthNode->next=NULL;  // break the link
        reverse(temp);

        if(temp == head){  // if the first K group
            head = kthNode;
        }
        else{
            prevNode -> next = kthNode;
        }
        prevNode= temp;
        temp= nextNode;
     }
     return head;
    }
};